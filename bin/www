#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-rest:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/******************************
 * Code for Socket.io handling
 *****************************/
var os = require('os');
var nodeStatic = require('node-static');
var socketIO = require('socket.io');
var fileServer = new(nodeStatic.Server)();
var io = socketIO.listen(server);
var users = [];

console.log('Server listening on port ' + port);

io.sockets.on('connection', function(socket) {
  function log() {
    var array = ['Message from server:'];
    array.push.apply(array, arguments);
    socket.emit('log', array);
  }

  /**
   *
   *    
   *  FOR PRODUCTION EMIT SHOULD BE ROOM ONLY:  io.sockets.in(room).emit(...)
   */
  socket.on('message', function(message) {
    log('Client said: ', message);
    // Broadcast for every user
    socket.broadcast.emit('message', message);

    // Room-only
    //socket.emit('message', message);
  });



  /**
   * On user presentation.
   * When user connects to the app, he presents itself to
   * get stored in the current online user's list of the server.
   */
  socket.on('presentation', function(username) {
    if (!username) {
      return;
    }

    var user  = { username: username, socket: socket };    
    users.push(user);
    
    console.log('User ' + username + ' connected. Users online: ' + users.length);
  });



  /**
   * La id sólo estará disponible cuando el otro usuario esté conectado,
   * puesto que se basa en los usuarios/sockets previamente conectados.
   * Esto está bien porque sólo podremos hablar con los usuarios conectados. (A tener en cuenta).
   * El usuario del socket está llamando al usuario con el nombre recibido por parámetro (calledName)
   */
  socket.on('call', function (calledName, username) {
    //Buscamos en la lista de usuarios el primer usuario con ese nombre (deben ser únicos)
    var user = findUserByName(calledName),
        room;

    if (!user) {
      socket.emit('userdisconnected', calledName, 'The user you\'re trying to call is disconnected');
      return;
    }

    //Establecemos el string de la habitación concatenando la id del socket called con la del caller
    room =  user.socket.id + "" + socket.id;
    console.log('User with ID:' + socket.id + ' is calling ' + calledName + '(' + user.socket.id + ')');
    
    //Introducimos al usuario en la habitación creada para el chat entre los usuarios.
    socket.join(room);

    //Notificamos al usuario que ha llamado de que se está llamando al usuario
    socket.emit('calling' , room, socket.id);

    //Notificamos al otro usuario de que se le está llamando
    user.socket.emit('called' , room, socket.id, username);
  });



  /**
   * Una vez el usuario ha sido llamado y lo ha cogido se une a la habitación en cuestión
   */
  socket.on('pickup', function (room, callerId) {
    var user = findUserById(callerId);
    
    //If user is disconnected, nothing to pick up
    if (!user) {      
      socket.emit('userdisconnected', callerId, 'The user you\'re trying to call is disconnected');
      return;
    }

    //Joining the room where the calling user is
    socket.join(room);
    
    //Notifying all participants in the room that the communication is ready to be established
    io.sockets.in(room).emit('ready');
  });



  /**
   * When the user reject when someone is calling
   */
  socket.on('rejectcall', function(callerId) {
    var user = findUserById(callerId);
    
    //If user is disconnected, nothing to notify
    if (!user) {
      return;
    }
    
    user.socket.emit('rejectedcall');
  });  



  /**
   * When the user stop calling someone
   */
  socket.on('cancelcall', function(calleeUsername) {
    var user = findUserByName(calleeUsername);
    
    //If user is disconnected, nothing to notify
    if (!user) {
      return;
    }
    
    user.socket.emit('canceledcall');
  });  



  /**
   * On user disconnect
   */
  socket.on('disconnect', function (room, username, reason) {
    //Removing the user that sent the disconnected message from the online users list.
    users = deleteUserById(socket.id);

    console.log('[USER DISCONNECT]: Online users (' + users.length + ')');
  });
  
  

/**
 * On ippaddr
 */
  socket.on('ipaddr', function() {
    var ifaces = os.networkInterfaces();
    for (var dev in ifaces) {
      ifaces[dev].forEach(function(details) {
        if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
          socket.emit('ipaddr', details.address);
        }
      });
    }
  });
});


//Functions

function findUserById(id) {
  return users.filter(user => user.socket.id === id)[0];
}

function findUserByName(username) {
  return users.filter(user => user.username === username)[0];
}

function deleteUserById(id) {
  return users.filter(user => user.socket.id !== id);
}